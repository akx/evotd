toBits = (val, bits=8) -> (!!(val & (1 << i))) for i from 0 til bits
fromBits = (bits) ->
	val = 0
	for bit, i of bits then if bit then val |= (1 << i)
	return val

lerp = (a, b, alpha) -> (b * (alpha)) + (a * (1 - alpha))
birand = (a, b) -> (a + Math.random() * (b - a)) * (if Math.random() < 0.5 then -1 else +1)
rand = (a, b) -> (a + Math.random() * (b - a))
irand = (a, b) -> 0 | (a + Math.random() * (b - a))
pick = (arr) -> arr[irand(0, arr.length)]

rangeCheck = (p1, p2, maxRange) ->
	dx = p1.x - p2.x
	dy = p1.y - p2.y
	return ((dx * dx) + (dy * dy) < (maxRange * maxRange))


lissajous = (ctx, time, ljParams) ->
	w = Math.cos(time * ljParams.wd)
	z = Math.sin(time * ljParams.zd)
	Rr = (ljParams.R - ljParams.r)
	for phi from 0 til 25 by 0.1
		Rr_p = Rr / ljParams.r * phi
		x = Rr * Math.cos(phi) + ljParams.d * Math.cos (w + Rr_p)
		y = Rr * Math.sin(phi) - ljParams.d * Math.sin (z - Rr_p)
		if phi == 0 then
			ctx.moveTo x, y
		else
			ctx.lineTo x, y

genLissajousParams = ->
	{
		R:	15 + Math.random() * 15
		r:	5 + Math.random() * 10
		d:	Math.random() * 5
		wd:	birand 1.1, 1.4
		zd:	birand 1.1, 1.4
	}


makeAstarNode = (x, y) -> {x, y, id: "#x,#y"}



aStar = (start, goal, getNeighbors) ->
	closed = {}
	open = []
	openIds = {}
	cameFrom = {}
	gScore = {}
	fScore = {}

	heuristic = (node1, node2) -> (Math.abs(node1.x - node2.x) + Math.abs(node1.y - node2.y))
	dist = (node1, node2) ->
		dx = (node1.x - node2.x)
		dy = (node1.y - node2.y)
		return Math.sqrt(dx * dx + dy * dy)

	putOpen = !(node, g) ->
		open.push node
		openIds[node.id] = 1
		gScore[node.id] = g
	
	setF = !(node) ->
		fScore[node.id] = gScore[node.id] + heuristic(node, goal)

	reconstructPath = ->
		current = goal
		path = []
		while (next = cameFrom[current.id]) then
			path.unshift next
			current = next
		return path


	putOpen(start, 0)
	setF(start)

	while open.length
		open = open.sort (a, b) -> (fScore[a.id] - fScore[b.id])
		current = open.shift!
		delete openIds[current.id]

		if current.id == goal.id then return reconstructPath!
		closed[current.id] = 1
		for neighbor of getNeighbors(current)
			continue if closed[neighbor.id]
			tentativeG = gScore[current.id] + dist(current, neighbor)
			if not openIds[neighbor.id] or tentativeG < gScore[neighbor.id]
				putOpen(neighbor, tentativeG)
				cameFrom[neighbor.id] = current
				fScore[neighbor.id] = gScore[neighbor.id] + heuristic(neighbor, goal)
	return null

######################################################################################################

class Gene
	initialize: ->
	evolve: (a, b, mutation = 0) ->

class EightBitGene extends Gene
	initialize: -> Math.random()
	evolve: (a, b, mutation = 0) ->
		aBits = eightBits (a * 255)
		bBits = eightBits (b * 255)
		cBits = for i from 0 til 8
			v = (Math.random! < 0.5)
			if Math.random! < mutation then v
			else if v then aBits[i] else bBits[i]
		return (fromBits(cBits) / 256)

class FloatGene extends Gene
	initialize: -> Math.random!
	evolve: (a, b, mutation = 0) ->
		if Math.random() < mutation then return @initialize!
		return lerp(a, b, rand(0.3, 0.7))

class Genome
	(@genes) ->

	initialize: ->
		obj = {}
		obj[name] = attr.initialize! for name, attr in @genes 
		return obj

	evolve: (a, b, mutation = 0) ->
		obj = {}
		for name, attr in @genes
			attrA = a[name]
			attrB = b[name]

			if attrA !== undefined and attrB !== undefined then
				value = attr.evolve attrA, attrB, mutation
			else
				value = attr.initialize!
			obj[name] = value
		return obj

######################################################################################################

class GridObject
	->
		@gridX = @gridY = @x = @y = 0

	setGridCoords: !(gridX, gridY) ->
		@x = (@gridX = 0 | gridX) * 32 + 16
		@y = (@gridY = 0 | gridY) * 32 + 16

	updateGridCoordsFromXY: ! ->
		@gridX = 0 | (@x / 32)
		@gridY = 0 | (@y / 32)

class Tower extends GridObject
	(@attributes) ->
		super!
		@nextReload = 0
		@nextShot = 0
		@nextAcquisition = 0

		@actual = {
			maxAmmo: 0 | lerp(1, 50, @attributes.reloadAmmo)
			shotInterval: 1.0 / lerp(3, 20, @attributes.shootSpeed)
			acqInterval: lerp(4, 0.3, @attributes. acquisitionSpeed)
			maxRange: 0 | lerp(48, 200, @attributes.maxRange)
			reloadTime: lerp(1, 5, @attributes.reloadSpeed),
			ammoDamage: lerp(1, 35, @attributes.ammoDamage),
			ammoSpeed: lerp(3, 20, @attributes.ammoSpeed),
			ammoRange: lerp(80, 300, @attributes.ammoRange),
			slowingAmmo: (@attributes.slowingAmmo > 0.75)
		}
		@actual.dps = @actual.ammoDamage / (1.0 / @actual.shotInterval)
		@depletionTime = @actual.maxAmmo * @actual.shotInterval + 0.1
		@reload!
		hue = 0 | (@attributes.hue * 360)
		@fillStyle = "hsl(#hue,100%,50%)"

	reload: ->
		@ammo = @actual.maxAmmo
		@nextShot = 0
		@nextReload = 0
		@reloading = false
	
	beginReload: ->	
		@reloading = true
		@nextReload = time + @depletionTime + @actual.reloadTime

	reacquire: ->
		@unacquire!

		closestEnemy = null
		closestDist = 0
		maxDistSq = (@actual.maxRange * @actual.maxRange)
		for enemy of world.creeps then
			dx = @x - enemy.x
			dy = @y - enemy.y
			distSq = (dx * dx) + (dy * dy)
			if (not closestEnemy or distSq < closestDist) and distSq < maxDistSq then
				closestDist = distSq
				closestEnemy = enemy
		@acquiredEnemy = closestEnemy
		@nextShot = time + @actual.shotInterval
		#console.log "Tower acq'd: ", @acquiredEnemy

	unacquire: !->
		@acquiredEnemy = null
		@nextAcquisition = time + @actual.acqInterval



	step: ->
		@onStage = true
		if time >= @nextAcquisition then
			@reacquire!

		if @ammo <= 0 
			if @nextReload <= 0 then
				@beginReload!
			else if time >= @nextReload then
				@reload!

		if @acquiredEnemy then
			if not rangeCheck(@, @acquiredEnemy, @actual.maxRange) then
				@unacquire!
			else if @ammo > 0 and time >= @nextShot then
				@nextShot = time + @actual.shotInterval
				if @acquiredEnemy.dead then
					@acquiredEnemy = null
				else
					@shoot @acquiredEnemy
					@ammo --

	shoot: (target) ->
		shot = new Shot(@x, @y, @fillStyle, @actual, target)
		world.ammo.push shot


	draw: !(ctx) ->

		pxHeight = 8 + (@attributes.height * 48)
		baseWidth = 3 + (@attributes.baseWidth * 27)
		topWidth = 3 + (@attributes.topWidth * 17)

		ctx.font = "12px Segoe UI, sans-serif"

		
		ctx.strokeStyle = "transparent"		
		for i from 0 til pxHeight by 3
			alpha = (1.0 - (i / pxHeight))
			alpha = Math.pow(alpha, @attributes.form * 2)
			sz = lerp topWidth, baseWidth, alpha
			hue = lerp @attributes.hue * 360, @attributes.hueTop * 360, alpha
			ctx.fillStyle = "hsl(#hue, 100%, 50%)"
			#xo = Math.cos (i) * 5 * @attributes.form
			#yo = Math.sin (i * @attributes.form) * 3
			ctx.beginPath!
			ctx.arc 0, -i, sz / 2, 0, 6.282
			ctx.fill!

		if @onStage then

			if @ammo > 0 then
				ctx.beginPath!
				abw = lerp(0, 32, @ammo / @actual.maxAmmo)
				ctx.rect -16, 14, abw, 2
				ctx.fill!
			
			
			ctx.fillStyle = "white"

			if @reloading and (time * 2) & 1 then
				ctx.beginPath!
				ctx.fillText "R", -2, 0
			if not @reloading and not @acquiredEnemy then
				ctx.beginPath!
				ctx.fillText "?", -2, 0




class Spawner extends GridObject
	->
		super!
		@ljParams = genLissajousParams!
		@figureOutNextSpawn!

	figureOutNextSpawn: !->
		@nextSpawn = time + rand(0.5, 4)

	draw: !(ctx) ->
		ctx.save!
		ctx.rotate time
		ctx.beginPath!
		ctx.strokeStyle = "red"
		ctx.lineWidth = 1
		lissajous ctx, time, @ljParams
		ctx.stroke!
		ctx.restore!

	step: !->
		if not world.gameOver and @nextSpawn and time >= @nextSpawn then
			@figureOutNextSpawn!
			@spawn!

	spawn: !->
		if world.creeps.length then
			genome = enemyGenome.evolve pick(world.creeps).attributes, pick(world.creeps).attributes, world.enemyMutationRate
		else
			genome = enemyGenome.initialize!
		creep = new Enemy(genome)
		creep.setGridCoords(@gridX, @gridY)
		creep.reroute!
		world.creeps.push creep

class Heart extends GridObject
	->
		super!
		@ljParams = genLissajousParams!
		@life = @maxLife = 50
		@damageBlip = 0

	damage: !->
		@life --
		@damageBlip = 15

	draw: !(ctx) ->
		ctx.strokeStyle = "lime"
		if @life < @maxLife * 0.5 and (time * 3 % 1) < 0.5 then 
			ctx.strokeStyle = "orange" 
		if @damageBlip > 0 then
			@damageBlip--
			if (time * 5 % 1) < 0.5 then ctx.strokeStyle = "white"

		ctx.save!
		ctx.rotate -time
		ctx.beginPath!
		ctx.lineWidth = 1
		lissajous ctx, time, @ljParams
		ctx.stroke!
		ctx.restore!
		if @life < @maxLife then
			ctx.save!
			ctx.rotate time * 3
			ctx.beginPath!
			ctx.lineWidth = 1
			ctx.arc 0, 0, 8 + Math.cos(time) * 2, 0, lerp(0, 6.282, @life / @maxLife)
			ctx.stroke!
			ctx.restore!

		#ctx.fillStyle = "white"
		#ctx.font = "10px bold Segoe UI, sans-serif"
		#text = "#{@life}"
		#w = ctx.measureText(text).width
		#ctx.fillText text, w*-0.5, 0


class Boulder extends GridObject
	->
		super!
		@blocking = true

	draw: !(ctx) ->
		ctx.beginPath!
		ctx.fillStyle = "#444"
		ctx.strokeStyle = "silver"
		ctx.lineWidth = 2
		ctx.rect -12, -12, 24, 24
		ctx.fill!
		ctx.stroke!
		ctx.beginPath!
		ctx.fillStyle = "#666"
		ctx.rect -12, -24, 24, 24
		ctx.fill!
		ctx.stroke!

class Enemy extends GridObject
	(@attributes) ->
		super!
		@route = null
		@actualSpeed = (lerp 1, 7, @attributes.speed) * Math.sqrt(@attributes.health)
		@actualSize = lerp(6, 32, @attributes.size) / 2
		@maxHealth = @health = 0 | lerp(30, 500, @attributes.health)
		@dx = @dy = 0
		console.log @attributes


	draw: !(ctx) ->
		hue = 0 | (@attributes.hue * 360)
		
		r = (@attributes.hue - 0.5) * time * (1 + @attributes.speed) * 10
		s = "hsl(#hue, 30%, 50%)"
		ctx.beginPath!
		if @damageBlip then
			s = "white"
			@damageBlip = false
		ctx.fillStyle = ctx.strokeStyle = s
		ctx.lineWidth = 2
		ctx.arc 0, 0, @actualSize, r, r + 4.7
		ctx.stroke!

		if @health > 0 and @health < @maxHealth then
			ctx.beginPath!
			abw = lerp(0, 32, @health / @maxHealth)
			ctx.rect -16, 14, abw, 2
			ctx.fill!


	step: !->
		lastTime = (@lastTime || time)
		delta = (time - lastTime)
		

		if @route and @route.length then
			nextNode = @route[0]
			dx = nextNode.worldX - @x
			dy = nextNode.worldY - @y
			dist2 = (dx * dx + dy * dy)
			if dist2 < (5 * 5) then
				@route.shift!
			else
				dir = Math.atan2(dy, dx)
				speed = Math.min(Math.sqrt(dist2), @actualSpeed)
				ndx = Math.cos(dir) * speed
				ndy = Math.sin(dir) * speed
				@dx = lerp(@dx, ndx, 0.5)
				@dy = lerp(@dy, ndy, 0.5)

		@x += @dx
		@y += @dy
		@updateGridCoordsFromXY!

		if not @route and Math.random() < 0.02 then
			@reroute!

		if @gridX == world.heart.gridX and @gridY == world.heart.gridY then
			@dead = true
			world.heart.damage!

		@lastTime = time

	reroute: ! ->
		@updateGridCoordsFromXY!
		start = makeAstarNode @gridX, @gridY
		end = makeAstarNode world.heart.gridX, world.heart.gridY
		route = aStar start, end, (world.~getAstarNeighbors)
		if not route
			console.log "COULD NOT FIND ROUTE", start, end
			@route = null
			return
			
			#route = [start]
		route.push end
		for point of route then
			point.worldX = point.x * 32 + irand(4, 32 - 4)
			point.worldY = point.y * 32 + irand(4, 32 - 4)

		@route = route

	damage: (val) ->
		return if @health <= 0
		@health -= val
		@damageBlip = true
		if @health <= 0 then
			world.credits ++
			@dead = true


class Shot extends GridObject
	(@x, @y, @fillStyle, @attributes, target) ->
		r = Math.atan2(target.y - @y, target.x - @x)
		@dx = Math.cos(r) * @attributes.ammoSpeed
		@dy = Math.sin(r) * @attributes.ammoSpeed
		@initialX = @x
		@initialY = @y
		range = @attributes.ammoRange
		@rangeSq = range * range
		@size = 0 | Math.max(1, (@attributes.ammoSpeed * 0.3) * 1.0 / (@attributes.ammoDamage * 3))

	step: !->
		@x += @dx
		@y += @dy

		idx = (@x - @initialX)
		idy = (@y - @initialY)

		if (idx * idx) + (idy * idy) >= @rangeSq then
			@dead = true

		for en of world.creeps
			dx = @x - en.x
			dy = @y - en.y

			if (dx * dx) + (dy * dy) < (en.actualSize * en.actualSize) then
				en.damage @attributes.ammoDamage
				if @attributes.slowingAmmo then
					en.actualSpeed *= 0.98
				@dead = true
				break

		gridX = 0 | (@x / 32)
		gridY = 0 | (@y / 32)

		for obj of world.objs then if obj.blocking
			if gridX == obj.gridX and gridY == obj.gridY then
				@dead = true
				break

	draw: !(ctx) ->
		ctx.beginPath!
		ctx.lineWidth = 1
		ctx.strokeStyle = "white"
		ctx.fillStyle = @fillStyle
		ctx.save!
		ctx.rotate(time * @speed)

		ctx.rect -@size, -@size, @size*2, @size*2
		ctx.fill!
		ctx.stroke!
		ctx.restore!



class World
	->
		@towers = []
		@creeps = []
		@ammo = []
		@towerTray = []
		@objs = []
		@enemyMutationRate = 0.09
		@towerMutationRate = 0.04

		@heart = null
		@credits = 0
		@gameOver = false




	getAstarNeighbors: (node) ->
		neighbors = []
		for ndx from -1 to +1
			for ndy from -1 to +1
				if ndx == 0 and ndy == 0
					then continue
				nx = node.x + ndx
				ny = node.y + ndy
				if @isRoutable(nx, ny) then
					neighbors.push(makeAstarNode(nx, ny))
		return neighbors
	

	_checkGridObj: (arrGridObjs, gridX, gridY, blockingOnly = false) ->
		for obj of arrGridObjs then
			if blockingOnly and not !!obj.blocking then continue
			if obj.gridX == gridX and obj.gridY == gridY then
				return obj
		return false

	isRoutable: (gridX, gridY) ->
		return false unless validGridCoords(gridX, gridY)
		return false if @_checkGridObj(@towers, gridX, gridY)
		return false if @_checkGridObj(@objs, gridX, gridY, true)
		return true


	isPlaceable: (gridX, gridY) ->
		return false unless validGridCoords(gridX, gridY)
		return false if @_checkGridObj(@towers, gridX, gridY)
		return false if @_checkGridObj(@objs, gridX, gridY)
		return true

	placeTower: (tower, gridX, gridY) ->
		for i from 0 til @towerTray.length
			if @towerTray[i] == tower then
				@towerTray.splice i, 1
				break
		tower.setGridCoords(gridX, gridY)
		@towers.push tower

		creep.reroute! for creep of @creeps

	_process: (aDrawables) ->
		i = 0
		while i < aDrawables.length
			d = aDrawables[i]
			d.step?!
			if d.x < 0 or d.y < 0 or d.x > 800 or d.y > 544 then
				#console.log "#d out of boundaries"
				d.dead = true
			if d.dead then
				#console.log "Killing #d"
				aDrawables.splice i, 1
				continue
			i += 1
		return aDrawables

	draw: (ctx) ->
		drawables = [].concat(
			@_process(@creeps),
			@_process(@towers),
			@_process(@objs),
			@_process(@ammo)
		)


		drawables.sort((a, b) -> a.y - b.y)
		for d of drawables
			ctx.translate d.x, d.y
			d.draw ctx
			ctx.translate -d.x, -d.y

			if debug.routes then
				r = d.route
				ctx.lineWidth = 1
				ctx.strokeStyle = "rgba(255,0,0,0.6)"
				if r then
					ctx.beginPath!
					ctx.moveTo d.x, d.y
					for p, i of r
						ctx.lineTo p.worldX, p.worldY
					ctx.stroke!

	newGame: !->
		@credits = 15

		for x from 0 til 5 
			@towerTray.push new Tower(towerGenome.initialize!)
		spawner = new Spawner()
		spawner.setGridCoords(0, 0 | (Math.random() * gridMaxY) - 1)		
		@objs.push spawner

		@heart = heart = new Heart()
		heart.setGridCoords(gridMaxX - 1, 0 | (Math.random() * gridMaxY) - 1)		
		@objs.push heart

		for i from 0 til 10
			boulder = new Boulder()
			x = irand 3, gridMaxX - 3
			y = irand 0, gridMaxY - 1
			for ever
				if @isPlaceable(x, y) then
					boulder.setGridCoords(x, y)
					break
			@objs.push boulder

	sellTower: !(tower)->
		for cTower, i of @towers then
			if tower == cTower then
				@towers.splice(i, 1)
				@credits += 3
				break


validGridCoords = (gridX, gridY) -> (gridX >= 0 and gridX < gridMaxX and gridY >= 0 and gridY < gridMaxY)
gridMaxX = 25
gridMaxY = 17
world = null
time = 0
debug = {-routes}

towerGenome = new Genome {
	height:				new FloatGene()
	baseWidth:			new FloatGene()
	topWidth:			new FloatGene()
	form:				new FloatGene()
	range:				new FloatGene()
	hue:				new FloatGene()
	hueTop:				new FloatGene()
	ammoSpeed:			new FloatGene()
	ammoDamage:			new FloatGene()
	ammoRange:			new FloatGene()
	ammoDeceleration:	new FloatGene()
	shootSpeed:			new FloatGene()
	reloadAmmo:			new FloatGene()
	reloadSpeed:		new FloatGene()
	acquisitionSpeed:	new FloatGene()
	maxRange:			new FloatGene()
	slowingAmmo:		new FloatGene()
}

traitNames = {
	maxAmmo: "Ammo/reload",
	shotInterval: "Shot Speed",
	acqInterval: "Acquisition Speed",
	maxRange: "Acquisition Range",
	reloadTime: "Reload Time",
	ammoDamage: "Ammo Damage",
	ammoSpeed: "Ammo Speed",
	ammoRange: "Ammo Range",
	dps: "DPS",


}

enemyGenome = new Genome {
	speed:				new FloatGene()
	health:				new FloatGene()
	hue:				new FloatGene()
	size:				new FloatGene()
	flying:				new FloatGene()
}

let document, window


	canvas = null
	ctx = null
	mouse = {b: false, x: 0, y: 0, down: {}}
	traySelected = null
	worldSelected = null
	tooltipText = null
	inspectTower = null
	

	setTooltip = !->
		tooltipText := "#it"

	drawGrid = ->
		ctx.beginPath!
		ctx.strokeStyle = "purple"
		ctx.lineWidth = 1
		for x from 0 til 800 by 32
			ctx.moveTo x + 0.5, 0
			ctx.lineTo x + 0.5, 544
		for y from 0 til 544 by 32
			ctx.moveTo 0, y + 0.5
			ctx.lineTo 800, y + 0.5
		ctx.stroke!


	drawScene = ->

		#drawGrid!
		if traySelected then
			if validGridCoords(mouse.gridX, mouse.gridY) then
				p = world.isPlaceable(mouse.gridX, mouse.gridY)
				ctx.beginPath!
				ctx.strokeStyle = (if p then "white" else "red")
				ctx.lineWidth = 2
				ctx.rect mouse.gridX * 32, mouse.gridY * 32, 32, 32
				ctx.stroke!
				if p then
					setTooltip "Place tower"

		worldSelectedChanged = false
		canEvolve = true
		if world.towerTray.length >= 10 then canEvolve = false; cantEvolveReason = "Too many towers in tray"
		if world.credits < 5 then canEvolve = false; cantEvolveReason = "Not enough credits"
		evolveTarget = null
		if not traySelected then
			for tower of world.towers then
				if worldSelected == tower or tower.gridX == mouse.gridX and tower.gridY == mouse.gridY then
					inspectTower := tower
					if worldSelected and worldSelected != tower then
						if canEvolve then
							evolveTarget = tower
							ctx.strokeStyle = "magenta"
							setTooltip "Evolve towers (5 CR)"
							ctx.lineWidth = 1
							ctx.beginPath!
							for i from 0 til 3
								ctx.moveTo tower.x + rand(-5, 5), tower.y + rand(-5, 5)
								ctx.lineTo worldSelected.x + rand(-5, 5), worldSelected.y + rand(-5, 5)
							ctx.stroke!
						else
							ctx.strokeStyle = "red"
							setTooltip "Can't evolve: #cantEvolveReason"
					ctx.beginPath!
					ctx.strokeStyle = (if worldSelected == tower then "magenta" else "purple")

					ctx.lineWidth = 4
					ctx.rect tower.gridX * 32, tower.gridY * 32, 32, 32
					ctx.stroke!
					if mouse.b then
						if canEvolve and worldSelected and worldSelected != tower then
							evTower = new Tower(towerGenome.evolve(worldSelected.attributes, tower.attributes, world.towerMutationRate))
							world.credits -= 5
							world.towerTray.push evTower
							worldSelected := null
							traySelected := evTower
						else
							worldSelected := tower
							worldSelectedChanged = true

		if evolveTarget then inspectTower := evolveTarget

		if worldSelected then
			ctx.strokeStyle = "silver"
			ctx.lineWidth = 1
			ctx.beginPath!
			ctx.arc worldSelected.x, worldSelected.y, worldSelected.actual.maxRange, 0, 6.282
			ctx.stroke!
			ctx.strokeStyle = "gray"
			ctx.beginPath!
			ctx.arc worldSelected.x, worldSelected.y, worldSelected.actual.ammoRange, 0, 6.282
			ctx.stroke!

		world.draw ctx

	drawTray = !->

		ctx.strokeStyle = "cyan"
		ctx.lineWidth = 1
		ctx.beginPath!
		ctx.moveTo 0, 544
		ctx.lineTo 800, 544
		ctx.moveTo 800, 0
		ctx.lineTo 800, 600
		ctx.stroke!
		ctx.beginPath!
		ctx.fillStyle = "silver"
		ctx.font = "14px Segoe UI, sans-serif"
		ctx.fillText "Credits: #{world.credits}", 820, 570
		ctx.fillText "Core Health: #{world.heart.life}", 820, 590

		if world.towerTray.length == 0 then
			ctx.fillText "Click on two towers to evolve them!", 16, 570
		else
			for tower, i of world.towerTray
				ctx.save!
				tx = 16 + i * 32
				ctx.translate tx, 585
				if mouse.x >= tx - 16 and mouse.x < tx + 16 and mouse.y > 544 or (traySelected == tower) then
					if traySelected != tower then
						setTooltip "Select tower to place"
					if mouse.b then
						traySelected := tower
						worldSelected := null
					ctx.beginPath!
					ctx.strokeStyle = (if tower == traySelected then "white" else "magenta")
					ctx.rect -15, -15, 30, 30
					ctx.stroke!
					inspectTower := tower
				tower.draw(ctx)
				ctx.restore!

	drawInspect = !->
		ctx.font = "14px Segoe UI, sans-serif"
		ctx.beginPath!
		ctx.fillStyle = "white"
		y = 20
		lines = []
		for key, val in inspectTower.actual
			if key = traitNames[key] then
				txval = (if val == (0 | val) then "#val" else val.toFixed(2))
				lines.push("#key: #txval")
		lines.push ""
		if inspectTower.actual.maxAmmo < 10 then lines.push "Low ammo"
		if inspectTower.actual.reloadTime > 5 then lines.push "Slow reload"
		if inspectTower.actual.maxRange < 50 then lines.push "Low range of acquisition"
		if inspectTower.actual.acqInterval > 3 then lines.push "Slow acquisition"
		if inspectTower.actual.ammoRange < 120 then lines.push "Low-range ammo"
		if inspectTower.actual.ammoDamage < 12 then lines.push "Low damage ammo"
		
		if inspectTower.actual.shotInterval < 0.1 then lines.push "Rapid fire"
		if inspectTower.actual.ammoSpeed > 12 then lines.push "Fast ammo"
		if inspectTower.actual.ammoDamage > 30 then lines.push "High ammo damage"
		if inspectTower.actual.maxRange > 150 then lines.push "Long range of acquisition"
		if inspectTower.actual.ammoRange > 250 then lines.push "Long-range ammo"
		if inspectTower.actual.acqInterval < 2 then lines.push "Fast acquisition"
		if inspectTower.actual.reloadTime < 2 then lines.push "Fast reload"
		if inspectTower.actual.slowingAmmo then lines.push "Ammo slows enemies"

		if inspectTower.onStage then
			lines.push ""
			lines.push "[S] Sell tower"

		for text of lines
			ctx.fillText text, 815, y
			y += 20


	draw = !->
		ctx.fillStyle = "#000"
		ctx.fillRect 0, 0, 1024, 600
		tooltipText := null
		inspectTower := null
		drawScene!
		ctx.fillStyle = "#000"
		ctx.fillRect 800, 0, 1024 - 800, 600
		drawTray!
		
		if inspectTower then
			drawInspect!



		if tooltipText then
			ctx.font = "12px Segoe UI, sans-serif"
			w = ctx.measureText(tooltipText).width
			ttX = mouse.x + 10
			if ttX + w + 5 > 800 then ttX = mouse.x - 10 - w
			ttY = Math.min(580, mouse.y - 5)
			ttX += 0.5
			ttY += 0.5

			ctx.fillStyle = "rgba(0,0,0,0.5)"
			ctx.strokeStyle = "white"
			ctx.lineWidth = 1
			ctx.beginPath!
			ctx.rect ttX, ttY, w + 6, 16
			ctx.fill!
			ctx.stroke!
			ctx.beginPath!
			ctx.fillStyle = "white"
			ctx.fillText tooltipText, ttX + 2, ttY + 12



	click = !->
		gridX = mouse.gridX
		gridY = mouse.gridY
		if traySelected then
			if validGridCoords(gridX, gridY) then
				if traySelected and world.isPlaceable(gridX, gridY) then
					world.placeTower traySelected, gridX, gridY
				traySelected := null
		if worldSelected and validGridCoords(gridX, gridY) and world.isPlaceable(gridX, gridY) then
			worldSelected := null

	keyPress = (keyCode) ->
		if keyCode == 115 and inspectTower and inspectTower.onStage then
			world.sellTower inspectTower

	step = ->
		time += 1 / 30.0
		draw!

	newGame = ->
		world := new World()
		world.newGame!
		


	init = ->
		$ = -> document.getElementById it
		canvas := $("canvas")
		ctx := canvas.getContext "2d"

		handleMove = (into, event) ->
			into.x = event.offsetX
			into.y = event.offsetY
			gx = 0 | (into.x / 32)
			gy = 0 | (into.y / 32)
			if validGridCoords(gx, gy) then
				into.gridX = gx
				into.gridY = gy
			else
				into.gridX = into.gridY = -1


		canvas.addEventListener "mousedown", !(event) ->
			mouse.b = true
			handleMove mouse, event
			handleMove mouse.down, event
		canvas.addEventListener "mouseup", !(event) ->
			mouse.b = false
			handleMove mouse, event
		canvas.addEventListener "mousemove", !(event) ->
			handleMove mouse, event
		canvas.addEventListener "click", !(event) ->
			handleMove mouse, event
			click!

		document.addEventListener "keypress", !(event) ->
			console.log event.keyCode
			keyPress event.keyCode

		newGame!
		setInterval step, 1000 / 20.0



	window.EvoTD = {init, debug, getWorld: -> world}